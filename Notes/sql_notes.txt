
--------------------------------------------------------------------------------

SQL Commands : 

DDL : Create, Alter, Drop, Rename, Truncate //altering schema or tables
DML : Insert, Update, Delete, Select		//data manipulation
DCL : Grant, Revoke							//granting permissions of tables to users
TCL : Commit, Rollback, Savepoint			//dealing with states of transactions
Constraints : Primary key, Foreign key, check, Not Null, Unique, Default

--------------------------------------------------------------------------

#Desc : Viewing structure of table

----------------------------------------------------------------------------

#Create : It is used to create DBMS objects like tables, database, views, triggers, procedures, functions etc. It is mostly used for creating tables.

Syntax - 
create table table_name(datatype fieldname1(limit), datatype fieldname2(limit));

Example - 
create table student("id" number(10), "name" varchar2(15), "branch" varchar2(15));

-----------------------------------------------------------------------------------

There are 3 techniques to fetch queries :- Nested Subquery | Corelated Subquery | Joins 

1. Nested Subquery : It follows bottom up approach | Best method

//Details of all employee who work in any dept
# Select * from Emp where e_id in (Select e_id from Dept);

2. Corelated Subquery : It follows Top down approach | m*n operations | costlier than other

//Details of all employee who work in any dept
# Select * from Emp where exists(Select e_id from Dept where Emp.e_id = Dept.e_id);

3. Joins : Cross Product + Conditions | Best method | Consumes Space

//Details of all employee who work in any dept
# Select * from Emp, Dept where Emp.e_id = Dept.e_id;

-----------------------------------------------------------------------------------------

Types of Joins : NATURAL JOIN | CROSS JOIN | SELF JOIN | INNER JOIN | LEFT JOIN | RIGHT JOIN | FULL OUTER JOIN

1. NATURAL JOIN : Natural Join joins two tables based on same attribute name and datatypes. The resulting table will contain all the attributes of both the table but keep only one copy of each common column.
# SELECT * FROM Student NATURAL JOIN Marks;

2. CROSS JOIN : It is cartesian product of two tables
# SELECT * FROM Student CROSS JOIN Marks;

3. SELF JOIN : A table joining with itself
#SELECT * FROM Student a, Student b WHERE some_condition;

4. INNER JOIN :  Returns rows that have matching values in both tables.

5. LEFT JOIN : Returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match.

6. RIGHT JOIN : Returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match.

7. FULL OUTER JOIN :  Returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in "Customers" that do not have matches in "Orders", or if there are rows in "Orders" that do not have matches in "Customers", those rows will be listed as well.

----------------------------------------------------------------------------------------------

GROUP BY : The GROUP BY statement groups rows that have the same values into summary rows, like "find the number of customers in each country"

HAVING : The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

------------------------------------------------------------------------------------------------

LIMIT : limits the number of records to be viewed.
#Select * from Emp LIMIT 50 //shows only first 50 records

----------------------------------------------------------------------------------------
Functions :

1. SUBSTRING : 	Select SUBSTRING('SQL Tutorial', 1, 3) //returns 'SQL'
2. RIGHT :  Select RIGHT('SQL TUTORIAL', 3) //returns rightmost 3 characters 'IAL'
3. CONCAT : concats different strings, SELECT CONCAT('Hello', 'how', 'are', you);

4. IF :  for condtional based printing, tell the type of triangle from table TRIANGLE

# SELECT IF(1000 > 500, 'YES', 'NO');

# SELECT IF(a + b > c and b + c > a and c + a > b, IF(a = b and b = c, 'Equilateral', IF(a = b or b = c or c = a, 'Isosceles', 'Scalene')), 'Not A Triangle')
from triangles;




----------------------------------------------------------------------------------------

Note : Ordering of fetched rows using Select is never guaranted, unless you explicitly use ORDER BY.

Problems : 

1. 2nd highest salary of an Employee
# Select max(sal) from Emp where sal != (select max(sal) from Emp);

2. Dept. wise highest salaries
# Select dept, max(sal) from Emp group by dept;

3. Display alternate records in SQL    
# Select * from (Select rownum rn, e_id, e_name, sal from Emp) where mod(rn, 2) != 0;  //odd records, do '=' for even recored, Simple!

4. Query the list of CITY names starting with vowels (a, e, i, o, u) from STATION
# Select distinct city from station where city regexp '^[aeiou]';


5. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION
# Select distinct city from station where city regexp '[aeiou]$';

6. Query the list of CITY names starting & ending with vowels (a, e, i, o, u) from STATION
#select distinct city
from station
where city regexp '^[AEIOUaeiou].*[AEIOUaeiou]$';














































2. Nth highest salary in Emp table //below sol using corelated subquery
#Select * from Emp e1 where (N - 1) = (Select count(distinct sal) from Emp e2 where e1.sal < e2.sal);